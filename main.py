from lexer import Lexer
from parser import Parser


def main():
    # Define token types and their corresponding regular expressions
    token_types = {
        'KEYWORDS': r'arguments|break|case|catch|continue|default|delete|do|else|eval|finally|for|function|if|in|'
                    r'instanceof|new|null|return|switch|this|throw|try|typeof|var|void|while|with|goto|let',
        'BOOLEAN': r'true|false',
        'IDENTIFIERS': r'[a-zA-Z_]\w*',
        'REALNUM': r'\d+\.?[e|E][\+|\-]?\d*',
        'FLOAT': r'\d+\.\d+',
        'INTEGER': r'\d+',
        'STRING': r"['\"](.*?)['\"]",
        'OPERATORS': r'[\+\-\^\*/\<\>\=\!\|\&]',
        'DELIMITERS': r'[\(\)\{\}\[\],;:\.]',
        'SPACES': r'\s'
    }

    # Define operator precedence
    precedence = {
        'if': 0,
        '(': 0,
        '[': 0,
        'АЭМ': 0,
        'Ф': 0,
        ',': 1,
        ';': 1,
        ')': 1,
        ']': 1,
        '{': 1,
        'else': 1,
        '=': 2,
        'goto': 2,
        '||': 3,
        '&&': 4,
        '!=': 5,
        '<': 6,
        '>': 6,
        '==': 6,
        '<=': 6,
        '>=': 6,
        '+': 7,
        '-': 7,
        '*': 8,
        '/': 8,
        '**': 9,
        ':': 10,
        'function': 10,
        '}': 10,
        'let': 10,
    }

    # Initialize the lexer with token types and precedence
    lexer = Lexer(token_types, precedence)

    # Tokenize the input code from 'code.txt'
    lexer.tokenize('code.js')

    # Perform lexical analysis
    lexer.analysis()

    # Get the tokens table generated by the lexer
    tokens = lexer.tokens_table

    # Convert the tokens to Reverse Polish Notation (RPN)
    rpn = lexer.convert_to_rpn()

    # Strip leading and trailing whitespaces from each token in RPN
    rpn = [token.strip() for token in rpn]

    # Initialize the parser with RPN and tokens table
    parser = Parser(rpn, tokens)

    # Convert the RPN to an abstract syntax tree (AST)
    parser.covert_from_rpn()

    # Write the output AST to 'results.py'
    with open('results.py', 'w') as file:
        file.write(parser.output)

    print("Done!")


if __name__ == '__main__':
    main()
